<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>Pisco Editor</title>
<script type="text/javascript" src="./core/js/highlight.pack.js"></script>
	<link rel="stylesheet" href="./core/css/katex.min.css" >
<script src="./core/js/katex.min.js" ></script>
	
<link rel="stylesheet" href="./core/css/monokai-sublime.min.css" />
<script type="text/javascript" src="./core/js/quill.min.js"></script>

<link rel="stylesheet" href="./core/css/style.css" />
<style>
  body > #standalone-container {
    margin: 50px auto;
    width: 720px;
  }
  #editor-container {
    height: 350px;
  }
</style>
<link rel="stylesheet" href="./css/quill.snow.css" />
  </head>
  <div class="test-controls">
			<button class="demo-button" id="git-test">git-test</button>
			<button class="demo-button" id="node-test">node-test</button>
			<button class="demo-button" id="test1">test1</button>
		</div>
  <body>
    <h1>Hello World! asdf</h1>
    <!-- All of the Node.js APIs are available in this renderer process. -->
    We are using Node.js <script>document.write(process.versions.node)</script>,
    Chromium <script>document.write(process.versions.chrome)</script>,
    and Electron <script>document.write(process.versions.electron)</script>.
	
	<div id="toolbar">
		<div>
			<label for="Proyecto">Proyecto</label>
			<input type="radio" id="Proyecto"  name="Menu">
			<div>
				<div>
				
				</div>
			</div>
		</div>
		<div>
			<label for="Inicio">Inicio</label>
			<input type="radio" id="Inicio"  name="Menu">
			<div>
				<span class="ql-formats">
				  <select class="ql-font"></select>
				  <select class="ql-size"></select>
				</span>
				<span class="ql-formats">
				  <button class="ql-bold"></button>
				  <button class="ql-italic"></button>
				  <button class="ql-underline"></button>
				  <button class="ql-strike"></button>
				</span>
				<span class="ql-formats">
				  <select class="ql-color"></select>
				  <select class="ql-background"></select>
				</span>
				<span class="ql-formats">
				  <button class="ql-script" value="sub"></button>
				  <button class="ql-script" value="super"></button>
				</span>
				
				<span class="ql-formats">
				  <button class="ql-list" value="ordered"></button>
				  <button class="ql-list" value="bullet"></button>
				  <button class="ql-indent" value="-1"></button>
				  <button class="ql-indent" value="+1"></button>
				</span>
				<span class="ql-formats">
				  <button class="ql-direction" value="rtl"></button>
				  <select class="ql-align"></select>
				</span>
				
				<span class="ql-formats">
				  <button class="ql-clean"></button>
				</span>
				<span class="ql-formats">
				  <button class="ql-header" value="1"></button>
				  <button class="ql-header" value="2"></button>
				  <button class="ql-blockquote"></button>
				  <button class="ql-code-block"></button>
				</span>
			</div>
		</div>
		<div>
			<label for="Insertar">Insertar</label>
			<input type="radio" id="Insertar">
			<div>
				<span class="ql-formats">
				  <button class="ql-table"></button>
				  <button class="ql-section"></button>
				  
				  <button class="ql-link"></button>
				  <button class="ql-image"></button>
				  <button class="ql-video"></button>
				  <button class="ql-formula"></button>
				</span>
			</div>
		</div>
		<div for="Diseno">
			<label>Dise√±o</label>
			<input type="radio" id="Diseno" name="Menu">
			<div>
				<div>
				
				</div>
			</div>
		</div>
		<div>
			<label for="Indices">Indices</label>
			<input type="radio" id="Indices" name="Menu">
			<div>
				<div>
				
				</div>
			</div>
		</div>
		<div>
			<label for="Vista">Vista</label>
			<input type="radio" id="Vista" name="Menu">
			<div>
				<div>
				
				</div>
			</div>
		</div>
	</div>
	
  <div id="editor-container">Some text to save into the file</div>
</div>
  </body>

  <script>
    
    require('./core/js/renderer.js'); // You can also require other files to run in this process
	
	
	//require('./js/quill.min.js'); //Load the visual editor Quill

  </script>
  <script type="text/javascript">
  var quill = new Quill('#editor-container', {
    modules: {
      formula: true,
      syntax: true,
      toolbar: '#toolbar'
    },
    placeholder: 'Compose an epic...',
    theme: 'snow'
  });

// You can obviously give a direct path without use the dialog (C:/Program Files/path/myfileexample.txt)

			
</script>
<div>
		<div class="demo-controls">
			<button class="demo-button" id="save">Guardar</button>
			<button class="demo-button" id="save-as">Guardar como...</button>
            <button class="demo-button" id="select-directory">Seleccionar directorio de trabajo</button>
            <span class="demo-response" id="selected-file">You selected: C:\Users\AdamLastQuarter\Documents\workspace JPEditor</span>
         </div>
		 
  <script>

	const ipc = require('electron').ipcRenderer;

const selectDirBtn = document.getElementById('select-directory');

document.getElementById('test1').addEventListener('click', function (event) {
  ipc.send('test1',document.getElementById('editor-container').innerHTML);
})
document.getElementById('git-test').addEventListener('click', function (event) {
  ipc.send('git-version',document.getElementById('editor-container').innerHTML);
})
document.getElementById('node-test').addEventListener('click', function (event) {
  ipc.send('node-version',document.getElementById('editor-container').innerHTML);
})

document.getElementById('select-directory').addEventListener('click', function (event) {
  ipc.send('open-file-dialog');
})

document.getElementById('save').addEventListener('click', function (event) {
  ipc.send('save-file',document.getElementById('editor-container').innerHTML);
})

document.getElementById('save-as').addEventListener('click', function (event) {
  ipc.send('save-as-file',document.getElementById('editor-container').innerHTML);
})

ipc.on('selected-directory', function (event, path) {
  document.getElementById('selected-file').innerHTML = `Your selected: ${path}`;
})

const settings = require('electron-settings');
 
settings.set('name', {
  first: 'Cosmo',
  last: 'Kramer'
});
 
console.log("settings.get('name.first'):"+settings.get('name.first'));
// => "Cosmo" 
 
console.log("settings.has('name.middle'):"+settings.has('name.middle'));
// => false 
</script>
  </div>   
</html>
